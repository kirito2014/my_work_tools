//高级选项卡
import fonts.fontAwesome;
import win.ui;
/*DSG{{*/
mainForm = win.form(text="使用高级选项";right=1040;bottom=642;bgcolor=16777215;border="none")
mainForm.add(
caption={cls="bkplus";text="选项卡演示";left=35;top=12;right=160;bottom=30;color=15780518;dl=1;dt=1;font=LOGFONT(h=-16);z=5};
logo={cls="bkplus";text='\uF0AD';left=6;top=9;right=35;bottom=34;color=15780518;dl=1;dt=1;font=LOGFONT(h=-18;name='FontAwesome');z=4};
tabPageContainer={cls="custom";left=0;top=40;right=1040;bottom=643;bgcolor=16777215;db=1;dl=1;dr=1;dt=1;z=1};
tabStripItem1={cls="plus";text="测试1";left=166;top=5;right=267;bottom=40;align="left";color=16777215;dl=1;dt=1;font=LOGFONT(h=-16);iconStyle={align="left";font=LOGFONT(h=-19;name='FontAwesome');padding={left=12;top=4}};iconText='\uF00A';notify=1;paddingLeft=1;paddingRight=1;paddingTop=3;textPadding={left=39;bottom=1};x=0.5;y=0.2;z=3};
tabStripItem2={cls="plus";text="测试2";left=270;top=5;right=369;bottom=40;align="left";color=16777215;dl=1;dt=1;font=LOGFONT(h=-16);iconStyle={align="left";font=LOGFONT(h=-19;name='FontAwesome');padding={left=12;top=4}};iconText='\uF11C ';notify=1;paddingLeft=1;paddingRight=1;paddingTop=3;textPadding={left=39;bottom=1};x=0.5;y=0.2;z=6};
titleBar={cls="bkplus";left=0;top=0;right=1042;bottom=41;bgcolor=14977280;dl=1;dr=1;dt=1;z=2}
)
/*}}*/

//导入高级选项卡
import win.ui.tabs;

/*
创建选项卡步骤：
1. 在窗体上创建 2 个选项卡按钮（tabstrip item）,
创建参数表的 cls 字段必须为 "plus"，也就是创建 2 个 plus 控件（ win.ui.ctrl.plus ）。
	- 如果按钮卡水平排列（顶端对齐）则创建水平选项卡。
	- 如果按钮垂直排列（左侧对齐）则创建垂直选项卡。
	- 这两个按钮对象必须放在 win.ui.tabs 的构造参数里。	
2. 在窗体上创建一个标签页容器（tabpage container），
创建参数表的 cls 字段必须为 "custom"，也就是创建 1 个 custom 控件（ win.ui.ctrl.custom ）。
	- 标签页容器必须紧贴在选项卡按钮（tabstrip item）一侧。
	- aardio 会自动搜寻合适的标签页容器（tabpage container），不需要手动指定。优先选择未禁用、未隐藏、未设置透明的 custom 控件。
	- 可选用 container 手动指定标签页容器，但不是必须这么做。
3. 然后调用下面的代码创建 win.ui.tabs 控件。
*/
var tabs = win.ui.tabs(mainForm.tabStripItem1,mainForm.tabStripItem2);

//指定选项卡右侧预留的空白边距（用于显示下拉菜单，以及其他需要放置的控件）
tabs.margin = 150;

//指定所有选项卡按钮的交互样式，用法与 plus 控件相同
tabs.skin({
	foreground={
		active=0xFFFFFFFF;
		default=0x00FFFFFF;
		hover=0x38FFFFFF
	};
	color={
		default=0xFFFFFFFF; 
	};
	checked={
		foreground={default=0xFFFFFFFF;}; 
		color={default=0xFF42A875;};
	}
})
//控件样式参数建议写到用户库里，改为 tabs.skin( styles.tabs ) 会更好。

//添加更多选项卡，参数可指定创建选项卡控件的属性(作为创建 plus 控件的表参数)
tabs.add({
	text="标签页1";
	iconText='\uF0AD';
	hasCloseButton = true;
})

//继续添加选项卡
tabs.add({
	text="标签页2";
	iconText='\uF0AD';
	hasCloseButton = true;
})

 //在创建窗体并设为第一个标签页，page1 是一个 win.form 对象。
var frmTabPage1 = tabs.loadForm(1);//参数 1 指加载到索引为 1 的标签页。
 
// 在第一个标签页上添加按钮，用法与 winform.add 相同。
frmTabPage1.add({
   button1 = { 
   		cls="button";
    	text="按钮2";
    	left=20;top=20;right=120;bottom=50;
    	
    	}
	}
)

frmTabPage1.button1.oncommand = function(){
	frmTabPage1.msgbox("hello")
}

/*
//可自参数指定的窗体代码文件加载子窗口到标签页容器，第一个参数指定选项卡索引（省略则为 -1） 
tabs.loadForm(1,"\dlg\first.aardio" );  
tabs.loadForm(2,"\dlg\hotkey.aardio" );  
tabs.loadForm(3,"\dlg\setting.aardio" ); 
tabs.loadForm(4,"\dlg\help.aardio" ); 	
*/

//切换选项卡触发下面的事件
tabs.onSelchange = function(indexx,stripItem,form){
	
}

/*
//选项卡调整位置会触发下面的函数
tabs.adjust = function(){
	var x,y,cx,cy = owner.getPos(); //获取选项卡的x,y 坐标,cx为宽度,cy 为高度
}
*/

//设置当前选项卡
tabs.selIndex = 1; 

//也可以用下面的代码自定义关闭按钮的外观样式
tabs.closeButton.skin(
    background = {
        hover = 0xFFe35c51;
        active = 0xFF8f241b;
        default = 0x99FFCC66;
    }
    color = {
        hover = 0xFFFFFFFF;
        active = 0xFFEEEEEE;
        default = 0xCCFFFFFF;
    }
)

//可以自定义关闭按钮在选项卡上的显示位
tabs.beforeShowCloseButton = function(stripItem,rcStripItem,rcCloseButton,dpiScaleX){ 
    return rcStripItem.right - 10 * dpiScaleX, rcStripItem.top -2* dpiScaleX;
}

import win.ui.simpleWindow;
win.ui.simpleWindow( mainForm );

mainForm.show();
win.loopMessage(); 
